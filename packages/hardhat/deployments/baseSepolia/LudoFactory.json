{
  "address": "0xfaC9e4b6F98AE31c46F97344E757a7B221935f64",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "podium",
          "type": "address[]"
        }
      ],
      "name": "GameFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "createGame",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGameDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "gameAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "players",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "podium",
              "type": "address[]"
            }
          ],
          "internalType": "struct LudoFactory.GameRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerGames",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "podium",
          "type": "address[]"
        }
      ],
      "name": "recordGameResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "recordPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8159387381f263a0b5417efcc7c732dc0a97fce0ba54ae3a808d209892b9a883",
  "receipt": {
    "to": null,
    "from": "0x3F781BFd9D5066b2187C3E4EC085611052173c51",
    "contractAddress": "0xfaC9e4b6F98AE31c46F97344E757a7B221935f64",
    "transactionIndex": 7,
    "gasUsed": "2221320",
    "logsBloom": "0x
    "blockHash": "0x92dd3642138e3c3e49d31d49a232a700623666a6bb7932d924bf28cef954236a",
    "transactionHash": "0x8159387381f263a0b5417efcc7c732dc0a97fce0ba54ae3a808d209892b9a883",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 15529517,
        "transactionHash": "0x8159387381f263a0b5417efcc7c732dc0a97fce0ba54ae3a808d209892b9a883",
        "address": "0xfaC9e4b6F98AE31c46F97344E757a7B221935f64",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f781bfd9d5066b2187c3e4ec085611052173c51"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x92dd3642138e3c3e49d31d49a232a700623666a6bb7932d924bf28cef954236a"
      }
    ],
    "blockNumber": 15529517,
    "cumulativeGasUsed": "2821166",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "4bf4b07f4225e5c4ec700964ad04ebc4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"podium\",\"type\":\"address[]\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"podium\",\"type\":\"address[]\"}],\"internalType\":\"struct LudoFactory.GameRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerGames\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"podium\",\"type\":\"address[]\"}],\"name\":\"recordGameResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"recordPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ludo/Factory.sol\":\"LudoFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@pythnetwork/entropy-sdk-solidity/EntropyEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EntropyStructs.sol\\\";\\n\\ninterface EntropyEvents {\\n    event Registered(EntropyStructs.ProviderInfo provider);\\n\\n    event Requested(EntropyStructs.Request request);\\n    event RequestedWithCallback(\\n        address indexed provider,\\n        address indexed requestor,\\n        uint64 indexed sequenceNumber,\\n        bytes32 userRandomNumber,\\n        EntropyStructs.Request request\\n    );\\n\\n    event Revealed(\\n        EntropyStructs.Request request,\\n        bytes32 userRevelation,\\n        bytes32 providerRevelation,\\n        bytes32 blockHash,\\n        bytes32 randomNumber\\n    );\\n    event RevealedWithCallback(\\n        EntropyStructs.Request request,\\n        bytes32 userRandomNumber,\\n        bytes32 providerRevelation,\\n        bytes32 randomNumber\\n    );\\n\\n    event ProviderFeeUpdated(address provider, uint128 oldFee, uint128 newFee);\\n\\n    event ProviderUriUpdated(address provider, bytes oldUri, bytes newUri);\\n\\n    event ProviderFeeManagerUpdated(\\n        address provider,\\n        address oldFeeManager,\\n        address newFeeManager\\n    );\\n\\n    event Withdrawal(\\n        address provider,\\n        address recipient,\\n        uint128 withdrawnAmount\\n    );\\n}\\n\",\"keccak256\":\"0x8f329f79c8b09bf5d5f44cc3d34d28ff6e949d72a89b735e5a0a41aafa4b666e\",\"license\":\"Apache-2.0\"},\"@pythnetwork/entropy-sdk-solidity/EntropyStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ncontract EntropyStructs {\\n    struct ProviderInfo {\\n        uint128 feeInWei;\\n        uint128 accruedFeesInWei;\\n        // The commitment that the provider posted to the blockchain, and the sequence number\\n        // where they committed to this. This value is not advanced after the provider commits,\\n        // and instead is stored to help providers track where they are in the hash chain.\\n        bytes32 originalCommitment;\\n        uint64 originalCommitmentSequenceNumber;\\n        // Metadata for the current commitment. Providers may optionally use this field to help\\n        // manage rotations (i.e., to pick the sequence number from the correct hash chain).\\n        bytes commitmentMetadata;\\n        // Optional URI where clients can retrieve revelations for the provider.\\n        // Client SDKs can use this field to automatically determine how to retrieve random values for each provider.\\n        // TODO: specify the API that must be implemented at this URI\\n        bytes uri;\\n        // The first sequence number that is *not* included in the current commitment (i.e., an exclusive end index).\\n        // The contract maintains the invariant that sequenceNumber <= endSequenceNumber.\\n        // If sequenceNumber == endSequenceNumber, the provider must rotate their commitment to add additional random values.\\n        uint64 endSequenceNumber;\\n        // The sequence number that will be assigned to the next inbound user request.\\n        uint64 sequenceNumber;\\n        // The current commitment represents an index/value in the provider's hash chain.\\n        // These values are used to verify requests for future sequence numbers. Note that\\n        // currentCommitmentSequenceNumber < sequenceNumber.\\n        //\\n        // The currentCommitment advances forward through the provider's hash chain as values\\n        // are revealed on-chain.\\n        bytes32 currentCommitment;\\n        uint64 currentCommitmentSequenceNumber;\\n        // An address that is authorized to set / withdraw fees on behalf of this provider.\\n        address feeManager;\\n    }\\n\\n    struct Request {\\n        // Storage slot 1 //\\n        address provider;\\n        uint64 sequenceNumber;\\n        // The number of hashes required to verify the provider revelation.\\n        uint32 numHashes;\\n        // Storage slot 2 //\\n        // The commitment is keccak256(userCommitment, providerCommitment). Storing the hash instead of both saves 20k gas by\\n        // eliminating 1 store.\\n        bytes32 commitment;\\n        // Storage slot 3 //\\n        // The number of the block where this request was created.\\n        // Note that we're using a uint64 such that we have an additional space for an address and other fields in\\n        // this storage slot. Although block.number returns a uint256, 64 bits should be plenty to index all of the\\n        // blocks ever generated.\\n        uint64 blockNumber;\\n        // The address that requested this random number.\\n        address requester;\\n        // If true, incorporate the blockhash of blockNumber into the generated random value.\\n        bool useBlockhash;\\n        // If true, the requester will be called back with the generated random value.\\n        bool isRequestWithCallback;\\n        // There are 2 remaining bytes of free space in this slot.\\n    }\\n}\\n\",\"keccak256\":\"0x8f64701cbb68c689f3acc480edb38f4fc02485cb40a754d9164e2da1644c8e08\",\"license\":\"Apache 2\"},\"@pythnetwork/entropy-sdk-solidity/IEntropy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EntropyEvents.sol\\\";\\n\\ninterface IEntropy is EntropyEvents {\\n    // Register msg.sender as a randomness provider. The arguments are the provider's configuration parameters\\n    // and initial commitment. Re-registering the same provider rotates the provider's commitment (and updates\\n    // the feeInWei).\\n    //\\n    // chainLength is the number of values in the hash chain *including* the commitment, that is, chainLength >= 1.\\n    function register(\\n        uint128 feeInWei,\\n        bytes32 commitment,\\n        bytes calldata commitmentMetadata,\\n        uint64 chainLength,\\n        bytes calldata uri\\n    ) external;\\n\\n    // Withdraw a portion of the accumulated fees for the provider msg.sender.\\n    // Calling this function will transfer `amount` wei to the caller (provided that they have accrued a sufficient\\n    // balance of fees in the contract).\\n    function withdraw(uint128 amount) external;\\n\\n    // Withdraw a portion of the accumulated fees for provider. The msg.sender must be the fee manager for this provider.\\n    // Calling this function will transfer `amount` wei to the caller (provided that they have accrued a sufficient\\n    // balance of fees in the contract).\\n    function withdrawAsFeeManager(address provider, uint128 amount) external;\\n\\n    // As a user, request a random number from `provider`. Prior to calling this method, the user should\\n    // generate a random number x and keep it secret. The user should then compute hash(x) and pass that\\n    // as the userCommitment argument. (You may call the constructUserCommitment method to compute the hash.)\\n    //\\n    // This method returns a sequence number. The user should pass this sequence number to\\n    // their chosen provider (the exact method for doing so will depend on the provider) to retrieve the provider's\\n    // number. The user should then call fulfillRequest to construct the final random number.\\n    //\\n    // This method will revert unless the caller provides a sufficient fee (at least getFee(provider)) as msg.value.\\n    // Note that excess value is *not* refunded to the caller.\\n    function request(\\n        address provider,\\n        bytes32 userCommitment,\\n        bool useBlockHash\\n    ) external payable returns (uint64 assignedSequenceNumber);\\n\\n    // Request a random number. The method expects the provider address and a secret random number\\n    // in the arguments. It returns a sequence number.\\n    //\\n    // The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\\n    // The `entropyCallback` method on that interface will receive a callback with the generated random number.\\n    //\\n    // This method will revert unless the caller provides a sufficient fee (at least getFee(provider)) as msg.value.\\n    // Note that excess value is *not* refunded to the caller.\\n    function requestWithCallback(\\n        address provider,\\n        bytes32 userRandomNumber\\n    ) external payable returns (uint64 assignedSequenceNumber);\\n\\n    // Fulfill a request for a random number. This method validates the provided userRandomness and provider's proof\\n    // against the corresponding commitments in the in-flight request. If both values are validated, this function returns\\n    // the corresponding random number.\\n    //\\n    // Note that this function can only be called once per in-flight request. Calling this function deletes the stored\\n    // request information (so that the contract doesn't use a linear amount of storage in the number of requests).\\n    // If you need to use the returned random number more than once, you are responsible for storing it.\\n    function reveal(\\n        address provider,\\n        uint64 sequenceNumber,\\n        bytes32 userRevelation,\\n        bytes32 providerRevelation\\n    ) external returns (bytes32 randomNumber);\\n\\n    // Fulfill a request for a random number. This method validates the provided userRandomness\\n    // and provider's revelation against the corresponding commitment in the in-flight request. If both values are validated\\n    // and the requestor address is a contract address, this function calls the requester's entropyCallback method with the\\n    // sequence number, provider address and the random number as arguments. Else if the requestor is an EOA, it won't call it.\\n    //\\n    // Note that this function can only be called once per in-flight request. Calling this function deletes the stored\\n    // request information (so that the contract doesn't use a linear amount of storage in the number of requests).\\n    // If you need to use the returned random number more than once, you are responsible for storing it.\\n    //\\n    // Anyone can call this method to fulfill a request, but the callback will only be made to the original requester.\\n    function revealWithCallback(\\n        address provider,\\n        uint64 sequenceNumber,\\n        bytes32 userRandomNumber,\\n        bytes32 providerRevelation\\n    ) external;\\n\\n    function getProviderInfo(\\n        address provider\\n    ) external view returns (EntropyStructs.ProviderInfo memory info);\\n\\n    function getDefaultProvider() external view returns (address provider);\\n\\n    function getRequest(\\n        address provider,\\n        uint64 sequenceNumber\\n    ) external view returns (EntropyStructs.Request memory req);\\n\\n    function getFee(address provider) external view returns (uint128 feeAmount);\\n\\n    function getAccruedPythFees()\\n        external\\n        view\\n        returns (uint128 accruedPythFeesInWei);\\n\\n    function setProviderFee(uint128 newFeeInWei) external;\\n\\n    function setProviderFeeAsFeeManager(\\n        address provider,\\n        uint128 newFeeInWei\\n    ) external;\\n\\n    function setProviderUri(bytes calldata newUri) external;\\n\\n    // Set manager as the fee manager for the provider msg.sender.\\n    // After calling this function, manager will be able to set the provider's fees and withdraw them.\\n    // Only one address can be the fee manager for a provider at a time -- calling this function again with a new value\\n    // will override the previous value. Call this function with the all-zero address to disable the fee manager role.\\n    function setFeeManager(address manager) external;\\n\\n    function constructUserCommitment(\\n        bytes32 userRandomness\\n    ) external pure returns (bytes32 userCommitment);\\n\\n    function combineRandomValues(\\n        bytes32 userRandomness,\\n        bytes32 providerRandomness,\\n        bytes32 blockHash\\n    ) external pure returns (bytes32 combinedRandomness);\\n}\\n\",\"keccak256\":\"0xeeeb4fa79dc73029e3a42d9328104aab844a5b9904ff9c85dcacaa71779ac8a4\",\"license\":\"Apache 2\"},\"@pythnetwork/entropy-sdk-solidity/IEntropyConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.0;\\n\\nabstract contract IEntropyConsumer {\\n    // This method is called by Entropy to provide the random number to the consumer.\\n    // It asserts that the msg.sender is the Entropy contract. It is not meant to be\\n    // override by the consumer.\\n    function _entropyCallback(\\n        uint64 sequence,\\n        address provider,\\n        bytes32 randomNumber\\n    ) external {\\n        address entropy = getEntropy();\\n        require(entropy != address(0), \\\"Entropy address not set\\\");\\n        require(msg.sender == entropy, \\\"Only Entropy can call this function\\\");\\n\\n        entropyCallback(sequence, provider, randomNumber);\\n    }\\n\\n    // getEntropy returns Entropy contract address. The method is being used to check that the\\n    // callback is indeed from Entropy contract. The consumer is expected to implement this method.\\n    // Entropy address can be found here - https://docs.pyth.network/entropy/contract-addresses\\n    function getEntropy() internal view virtual returns (address);\\n\\n    // This method is expected to be implemented by the consumer to handle the random number.\\n    // It will be called by _entropyCallback after _entropyCallback ensures that the call is\\n    // indeed from Entropy contract.\\n    function entropyCallback(\\n        uint64 sequence,\\n        address provider,\\n        bytes32 randomNumber\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xf3d3dee1e9cbdef70b6c1f4d79aa8b438413e4636c00e79e615da9dc4df9c379\",\"license\":\"Apache 2\"},\"contracts/Ludo/Factory.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"./Game.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LudoFactory is Ownable {\\n    struct GameRecord {\\n        address gameAddress;\\n        address creator;\\n        address[] players;\\n        address[] podium;\\n    }\\n\\n    GameRecord[] public games;\\n    mapping(address => uint256[]) public playerGames;\\n\\n    event GameCreated(address gameAddress, address creator);\\n    event GameFinished(address gameAddress, address[] podium);\\n\\n    function createGame() external returns (address) {\\n        LudoGame newGame = new LudoGame(msg.sender, address(this));\\n        games.push(GameRecord({\\n            gameAddress: address(newGame),\\n            creator: msg.sender,\\n            players: new address[](0),\\n            podium: new address[](0)\\n        }));\\n        newGame.initialiseFirstPlayer(msg.sender);\\n        uint256 gameId = games.length - 1;\\n        playerGames[msg.sender].push(gameId);\\n        emit GameCreated(address(newGame), msg.sender);\\n        return address(newGame);\\n    }\\n\\n    function recordPlayer(address player) external {\\n        require(games.length > 0, \\\"No games created yet\\\");\\n        uint256 gameId = games.length - 1;\\n        require(msg.sender == games[gameId].gameAddress, \\\"Only the game contract can record players\\\");\\n        games[gameId].players.push(player);\\n        playerGames[player].push(gameId);\\n    }\\n\\n    function recordGameResult(address[] memory podium) external {\\n        require(games.length > 0, \\\"No games created yet\\\");\\n        uint256 gameId = games.length - 1;\\n        require(msg.sender == games[gameId].gameAddress, \\\"Only the game contract can record results\\\");\\n        games[gameId].podium = podium;\\n        emit GameFinished(games[gameId].gameAddress, podium);\\n    }\\n\\n    function getPlayerGames(address player) external view returns (uint256[] memory) {\\n        return playerGames[player];\\n    }\\n\\n    function getGameDetails(uint256 gameId) external view returns (GameRecord memory) {\\n        require(gameId < games.length, \\\"Invalid game ID\\\");\\n        return games[gameId];\\n    }\\n}\\n\",\"keccak256\":\"0x895fea4be2818404c3774e745a346d7453ce52136a111f523460c2cb63c2995b\"},\"contracts/Ludo/Game.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@pythnetwork/entropy-sdk-solidity/IEntropyConsumer.sol\\\";\\nimport \\\"@pythnetwork/entropy-sdk-solidity/IEntropy.sol\\\";\\nimport \\\"./Factory.sol\\\";\\n\\ncontract LudoGame is IEntropyConsumer {\\n    IEntropy public entropy;\\n    address public provider;\\n    LudoFactory public factory;\\n\\n    enum GameState { Waiting, Playing, Finished }\\n    \\n    struct Player {\\n        address addr;\\n        uint8[4] pawns;\\n        bool[4] inHome;\\n        uint8 pawnsAtHome;\\n    }\\n\\n    GameState public state;\\n    Player[4] public players;\\n    uint8 public currentPlayerTurn;\\n    uint8 public playerCount;\\n    uint64 public lastSequenceNumber;\\n    uint8 public constant BOARD_SIZE = 52;\\n    uint8 public constant PAWNS_PER_PLAYER = 4;\\n\\n    event PlayerJoined(address player);\\n    event DiceRolled(address player, uint8 roll);\\n    event PawnMoved(address player, uint8 pawnIndex, uint8 newPosition);\\n    event PawnKnockedOut(address attacker, address victim, uint8 pawnIndex);\\n    event PlayerWon(address player);\\n    event GameFinished(address winner);\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == address(factory), \\\"Only the factory can call this function\\\");\\n        _;\\n    }\\n\\n    constructor(address _creator, address _factory) {\\n        factory = LudoFactory(_factory);\\n        entropy = IEntropy(0x41c9e39574F40Ad34c79f1C99B66A45eFB830d4c); // Replace with actual Entropy contract address\\n        provider = entropy.getDefaultProvider();\\n        players[0].addr = _creator;\\n        playerCount = 1;\\n        state = GameState.Waiting;\\n    }\\n\\n    function initialiseFirstPlayer(address _player) onlyFactory external {\\n        players[0].addr = _player;\\n        playerCount = 1;\\n        state = GameState.Waiting;\\n        factory.recordPlayer(_player);\\n    }\\n\\n    function joinGame() external {\\n        require(state == GameState.Waiting, \\\"Game is not in waiting state\\\");\\n        require(playerCount < 4, \\\"Game is full\\\");\\n        \\n        players[playerCount].addr = msg.sender;\\n        for (uint8 i = 0; i < PAWNS_PER_PLAYER; i++) {\\n            players[playerCount].pawns[i] = 0;\\n            players[playerCount].inHome[i] = false;\\n        }\\n        players[playerCount].pawnsAtHome = PAWNS_PER_PLAYER;\\n        playerCount++;\\n        \\n        factory.recordPlayer(msg.sender);\\n\\n        if (playerCount == 4) {\\n            state = GameState.Playing;\\n        }\\n        \\n        emit PlayerJoined(msg.sender);\\n    }\\n\\n    function rollDice() external {\\n        require(state == GameState.Playing, \\\"Game is not in playing state\\\");\\n        require(msg.sender == players[currentPlayerTurn].addr, \\\"Not your turn\\\");\\n        uint256 fee = entropy.getFee(provider);\\n        uint64 sequenceNumber = entropy.requestWithCallback{value: fee}(provider, keccak256(abi.encodePacked(block.timestamp, msg.sender)));\\n        lastSequenceNumber = sequenceNumber;\\n    }\\n\\n    function getEntropy() internal view override returns (address) {\\n        return address(entropy);\\n    }\\n\\n    function entropyCallback(uint64 sequenceNumber, address, bytes32 randomNumber) internal override {\\n        require(sequenceNumber == lastSequenceNumber, \\\"Invalid sequence number\\\");\\n        \\n        uint8 roll = uint8(uint256(randomNumber) % 6) + 1;\\n        emit DiceRolled(players[currentPlayerTurn].addr, roll);\\n        \\n        bool moved = false;\\n        Player storage currentPlayer = players[currentPlayerTurn];\\n\\n        // Check if player can move any pawn out of home\\n        if (roll == 6 && currentPlayer.pawnsAtHome > 0) {\\n            for (uint8 i = 0; i < PAWNS_PER_PLAYER; i++) {\\n                if (currentPlayer.pawns[i] == 0) {\\n                    currentPlayer.pawns[i] = 1;\\n                    currentPlayer.pawnsAtHome--;\\n                    moved = true;\\n                    emit PawnMoved(currentPlayer.addr, i, 1);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // If no pawn was moved out of home, try to move existing pawns\\n        if (!moved) {\\n            for (uint8 i = 0; i < PAWNS_PER_PLAYER; i++) {\\n                if (currentPlayer.pawns[i] > 0 && !currentPlayer.inHome[i]) {\\n                    uint8 newPosition = (currentPlayer.pawns[i] + roll) % BOARD_SIZE;\\n                    if (newPosition == 0) newPosition = BOARD_SIZE;\\n\\n                    // Check if pawn can enter home\\n                    if (newPosition > BOARD_SIZE - 6) {\\n                        currentPlayer.inHome[i] = true;\\n                        currentPlayer.pawnsAtHome++;\\n                        emit PawnMoved(currentPlayer.addr, i, newPosition);\\n                        moved = true;\\n                        break;\\n                    }\\n\\n                    // Check for knocking out other players' pawns\\n                    for (uint8 j = 0; j < playerCount; j++) {\\n                        if (j != currentPlayerTurn) {\\n                            for (uint8 k = 0; k < PAWNS_PER_PLAYER; k++) {\\n                                if (players[j].pawns[k] == newPosition) {\\n                                    players[j].pawns[k] = 0;\\n                                    players[j].pawnsAtHome++;\\n                                    emit PawnKnockedOut(currentPlayer.addr, players[j].addr, k);\\n                                }\\n                            }\\n                        }\\n                    }\\n\\n                    currentPlayer.pawns[i] = newPosition;\\n                    emit PawnMoved(currentPlayer.addr, i, newPosition);\\n                    moved = true;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // Check if the current player has won\\n        if (currentPlayer.pawnsAtHome == PAWNS_PER_PLAYER) {\\n            emit PlayerWon(currentPlayer.addr);\\n            state = GameState.Finished;\\n            emit GameFinished(currentPlayer.addr);\\n        } else {\\n            // Move to the next player's turn if the current player didn't roll a 6\\n            if (roll != 6) {\\n                currentPlayerTurn = (currentPlayerTurn + 1) % playerCount;\\n            }\\n        }\\n    }\\n\\n    function getPawnPositions(uint8 playerIndex) external view returns (uint8[4] memory) {\\n        require(playerIndex < playerCount, \\\"Invalid player index\\\");\\n        return players[playerIndex].pawns;\\n    }\\n\\n    function getPlayerAddress(uint8 playerIndex) external view returns (address) {\\n        require(playerIndex < playerCount, \\\"Invalid player index\\\");\\n        return players[playerIndex].addr;\\n    }\\n\\n    function getCurrentPlayerTurn() external view returns (uint8) {\\n        return currentPlayerTurn;\\n    }\\n\\n    function getGameState() external view returns (GameState) {\\n        return state;\\n    }\\n\\n    function finishGame() internal {\\n        require(state == GameState.Finished, \\\"Game is not finished\\\");\\n        address[] memory podium = new address[](playerCount);\\n        uint8 podiumIndex = 0;\\n        for (uint8 i = 0; i < playerCount; i++) {\\n            if (players[i].pawnsAtHome == PAWNS_PER_PLAYER) {\\n                podium[podiumIndex] = players[i].addr;\\n                podiumIndex++;\\n            }\\n        }\\n        factory.recordGameResult(podium);\\n    }\\n\\n    function setEntropyContract(address _entropyAddress) external {\\n        require(msg.sender == factory.owner(), \\\"Only factory owner can set Entropy contract\\\");\\n        entropy = IEntropy(_entropyAddress);\\n    }\\n}\",\"keccak256\":\"0x64a2a658b43a506ac336e85dbb2b2db5be8bfaa423ae90821fccfae668bfa1d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6126cc8061007e6000396000f3fe60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c80637255d729116200006e5780637255d729146200016a5780638da5cb5b146200018d578063b3be8f36146200019f578063c62ce5d714620001b6578063f2fde38b14620001cd57600080fd5b80630a5694c214620000b0578063117a5b9014620000da578063129daf8414620001125780631b31abda1462000138578063715018a6146200015e575b600080fd5b620000c7620000c136600462000b62565b620001e4565b6040519081526020015b60405180910390f35b620000f1620000eb36600462000b8f565b62000216565b604080516001600160a01b03938416815292909116602083015201620000d1565b620001296200012336600462000ba9565b62000250565b604051620000d1919062000bce565b6200014f6200014936600462000b8f565b620002be565b604051620000d1919062000c5a565b6200016862000442565b005b620001746200045a565b6040516001600160a01b039091168152602001620000d1565b6000546001600160a01b031662000174565b62000168620001b036600462000cd6565b62000691565b62000168620001c736600462000ba9565b6200082b565b62000168620001de36600462000ba9565b6200098b565b600260205281600052604060002081815481106200020157600080fd5b90600052602060002001600091509150505481565b600181815481106200022757600080fd5b6000918252602090912060049091020180546001909101546001600160a01b0391821692501682565b6001600160a01b038116600090815260026020908152604091829020805483518184028101840190945280845260609392830182828015620002b257602002820191906000526020600020905b8154815260200190600101908083116200029d575b50505050509050919050565b604080516080810182526000808252602082015260609181018290528181019190915260015482106200032a5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590819d85b59481251608a1b60448201526064015b60405180910390fd5b6001828154811062000340576200034062000da9565b600091825260209182902060408051608081018252600490930290910180546001600160a01b039081168452600182015416838501526002810180548351818702810187018552818152949592949386019392830182828015620003ce57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620003af575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156200043257602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000413575b5050505050815250509050919050565b6200044c62000a0a565b62000458600062000a66565b565b60008033306040516200046d9062000ab6565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015620004a1573d6000803e3d6000fd5b50604080516080810182526001600160a01b03831681523360208201529192506001919081016000604051908082528060200260200182016040528015620004f3578160200160208202803683370190505b508152602001600060405190808252806020026020018201604052801562000525578160200160208202803683370190505b5090528154600181810184556000938452602093849020835160049093020180546001600160a01b039384166001600160a01b031991821617825585850151928201805493909416921691909117909155604082015180519293919262000593926002850192019062000ac4565b5060608201518051620005b191600384019160209091019062000ac4565b5050604051630402c38960e11b81523360048201526001600160a01b0383169150630805871290602401600060405180830381600087803b158015620005f657600080fd5b505af11580156200060b573d6000803e3d6000fd5b5050600180546000935062000621925062000dbf565b33600081815260026020908152604080832080546001810182559084529282902090920184905581516001600160a01b0387168152908101929092529192507fb60d84e37a6658effce28870b1d123cb86f86409df5888679310c0f276e1f5d2910160405180910390a150919050565b600154620006d95760405162461bcd60e51b8152602060048201526014602482015273139bc819d85b595cc818dc99585d1959081e595d60621b604482015260640162000321565b60018054600091620006eb9162000dbf565b90506001818154811062000703576200070362000da9565b60009182526020909120600490910201546001600160a01b031633146200077f5760405162461bcd60e51b815260206004820152602960248201527f4f6e6c79207468652067616d6520636f6e74726163742063616e207265636f726044820152686420726573756c747360b81b606482015260840162000321565b816001828154811062000796576200079662000da9565b90600052602060002090600402016003019080519060200190620007bc92919062000ac4565b507f3416b1d5f6001c304732992c6b449f4618d142683d0d7844e5d17c4fc49a691f60018281548110620007f457620007f462000da9565b60009182526020909120600490910201546040516200081f916001600160a01b031690859062000de7565b60405180910390a15050565b600154620008735760405162461bcd60e51b8152602060048201526014602482015273139bc819d85b595cc818dc99585d1959081e595d60621b604482015260640162000321565b60018054600091620008859162000dbf565b9050600181815481106200089d576200089d62000da9565b60009182526020909120600490910201546001600160a01b03163314620009195760405162461bcd60e51b815260206004820152602960248201527f4f6e6c79207468652067616d6520636f6e74726163742063616e207265636f726044820152686420706c617965727360b81b606482015260840162000321565b600181815481106200092f576200092f62000da9565b60009182526020808320600260049093020182018054600181810183559185528285200180546001600160a01b039097166001600160a01b03199097168717905594835290815260408220805494850181558252902090910155565b6200099562000a0a565b6001600160a01b038116620009fc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000321565b62000a078162000a66565b50565b6000546001600160a01b03163314620004585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000321565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6118518062000e4683390190565b82805482825590600052602060002090810192821562000b1c579160200282015b8281111562000b1c57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000ae5565b5062000b2a92915062000b2e565b5090565b5b8082111562000b2a576000815560010162000b2f565b80356001600160a01b038116811462000b5d57600080fd5b919050565b6000806040838503121562000b7657600080fd5b62000b818362000b45565b946020939093013593505050565b60006020828403121562000ba257600080fd5b5035919050565b60006020828403121562000bbc57600080fd5b62000bc78262000b45565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562000c085783518352928401929184019160010162000bea565b50909695505050505050565b600081518084526020808501945080840160005b8381101562000c4f5781516001600160a01b03168752958201959082019060010162000c28565b509495945050505050565b60208152600060018060a01b038084511660208401528060208501511660408401525060408301516080606084015262000c9860a084018262000c14565b90506060840151601f1984830301608085015262000cb7828262000c14565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121562000cea57600080fd5b823567ffffffffffffffff8082111562000d0357600080fd5b818501915085601f83011262000d1857600080fd5b81358181111562000d2d5762000d2d62000cc0565b8060051b604051601f19603f8301168101818110858211171562000d555762000d5562000cc0565b60405291825284820192508381018501918883111562000d7457600080fd5b938501935b8285101562000d9d5762000d8d8562000b45565b8452938501939285019262000d79565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b8181038181111562000de157634e487b7160e01b600052601160045260246000fd5b92915050565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b8181101562000e3757855185168352948301949183019160010162000e17565b50909897505050505050505056fe60806040523480156200001157600080fd5b506040516200185138038062001851833981016040819052620000349162000143565b600280546001600160a01b03199081166001600160a01b03841617909155600080547341c9e39574f40ad34c79f1c99b66a45efb830d4c921682179055604080516320bba64360e21b815290516382ee990c916004808201926020929091908290030181865afa158015620000ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d391906200017b565b600180546001600160a01b03199081166001600160a01b03938416179091556003805494909216931692909217909155506013805461ff0019166101001790556002805460ff60a01b19169055620001a0565b80516001600160a01b03811681146200013e57600080fd5b919050565b600080604083850312156200015757600080fd5b620001628362000126565b9150620001726020840162000126565b90509250929050565b6000602082840312156200018e57600080fd5b620001998262000126565b9392505050565b6116a180620001b06000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063837e7cc6116100ad578063d4f77b1c11610071578063d4f77b1c14610265578063d664006d1461026d578063dc4a3e951461028d578063e2ce0beb14610295578063f71d96cb146102a857600080fd5b8063837e7cc6146101e8578063955112cd146101f0578063b7d0628b14610223578063c19d93fb1461023e578063c45a01551461025257600080fd5b806347ce07cc116100f457806347ce07cc146101a25780634ff97b19146101b557806352a5f1f8146101c0578063552fcb1a146101d3578063564c49d5146101db57600080fd5b80630805871214610126578063085d48831461013b5780632e9c55391461016b578063302bcc571461017e575b600080fd5b6101396101343660046113f3565b6102dc565b005b60015461014e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101396101793660046113f3565b6103e1565b60135461019090610100900460ff1681565b60405160ff9091168152602001610162565b60005461014e906001600160a01b031681565b60135460ff16610190565b6101396101ce36600461142d565b6104ee565b610190600481565b6013546101909060ff1681565b6101396105bc565b60135461020a9062010000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610162565b600254600160a01b900460ff165b6040516101629190611484565b60025461023190600160a01b900460ff1681565b60025461014e906001600160a01b031681565b6101396107f4565b61028061027b3660046114ac565b610af1565b60405161016291906114cf565b610190603481565b61014e6102a33660046114ac565b610bb9565b6102bb6102b6366004611503565b610c3a565b604080516001600160a01b03909316835260ff909116602083015201610162565b6002546001600160a01b0316331461034b5760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792074686520666163746f72792063616e2063616c6c207468697320666044820152663ab731ba34b7b760c91b60648201526084015b60405180910390fd5b600380546001600160a01b0319166001600160a01b038084169182179092556013805461010061ff00199091161790556002805460ff60a01b19811690915560405163c62ce5d760e01b815260048101929092529091169063c62ce5d790602401600060405180830381600087803b1580156103c657600080fd5b505af11580156103da573d6000803e3d6000fd5b5050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104589190611532565b6001600160a01b0316336001600160a01b0316146104cc5760405162461bcd60e51b815260206004820152602b60248201527f4f6e6c7920666163746f7279206f776e65722063616e2073657420456e74726f60448201526a1c1e4818dbdb9d1c9858dd60aa1b6064820152608401610342565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316806105475760405162461bcd60e51b815260206004820152601760248201527f456e74726f70792061646472657373206e6f74207365740000000000000000006044820152606401610342565b336001600160a01b038216146105ab5760405162461bcd60e51b815260206004820152602360248201527f4f6e6c7920456e74726f70792063616e2063616c6c20746869732066756e637460448201526234b7b760e91b6064820152608401610342565b6105b6848484610c69565b50505050565b600160028054600160a01b900460ff16908111156105dc576105dc61146e565b146106295760405162461bcd60e51b815260206004820152601c60248201527f47616d65206973206e6f7420696e20706c6179696e67207374617465000000006044820152606401610342565b60135460039060ff16600481106106425761064261151c565b60040201546001600160a01b0316331461068e5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610342565b60008054600154604051631711922960e31b81526001600160a01b03918216600482015291169063b88c914890602401602060405180830381865afa1580156106db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ff919061154f565b6000805460015460408051426020808301919091523360601b6bffffffffffffffffffffffff19168284015282516034818403018152605483019384905280519101206319cb825f60e01b9092526001600160a01b03928316605882015260788101919091526001600160801b0394909416945091929116906319cb825f90849060980160206040518083038185885af11580156107a1573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107c69190611578565b6013805467ffffffffffffffff909216620100000269ffffffffffffffff0000199092169190911790555050565b600060028054600160a01b900460ff16908111156108145761081461146e565b146108615760405162461bcd60e51b815260206004820152601c60248201527f47616d65206973206e6f7420696e2077616974696e67207374617465000000006044820152606401610342565b601354600461010090910460ff16106108ab5760405162461bcd60e51b815260206004820152600c60248201526b11d85b59481a5cc8199d5b1b60a21b6044820152606401610342565b6013543390600390610100900460ff16600481106108cb576108cb61151c565b6004020180546001600160a01b0319166001600160a01b039290921691909117905560005b600460ff821610156109cc57601354600090600390610100900460ff166004811061091d5761091d61151c565b600402016001018260ff16600481106109385761093861151c565b602091828204019190066101000a81548160ff021916908360ff16021790555060006003601360019054906101000a900460ff1660ff166004811061097f5761097f61151c565b600402016002018260ff166004811061099a5761099a61151c565b602091828204019190066101000a81548160ff02191690831515021790555080806109c4906115ab565b9150506108f0565b50601354600490600390610100900460ff168281106109ed576109ed61151c565b60040201600301805460ff191660ff928316179055601380546101009004909116906001610a1a836115ab565b825460ff9182166101009390930a92830291909202199091161790555060025460405163c62ce5d760e01b81523360048201526001600160a01b039091169063c62ce5d790602401600060405180830381600087803b158015610a7c57600080fd5b505af1158015610a90573d6000803e3d6000fd5b5050601354610100900460ff166004039150610abc9050576002805460ff60a01b1916600160a01b1790555b6040513381527f31e760aa525306aba638a784082a013b6a1cc0a9a1789f3f22281c0453b10b1f9060200160405180910390a1565b610af96113bd565b60135460ff610100909104811690831610610b4d5760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0d8c2f2cae440d2dcc8caf60631b6044820152606401610342565b60038260ff1660048110610b6357610b6361151c565b604080516080810191829052926004928302016001019190826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610b80575094979650505050505050565b60135460009060ff610100909104811690831610610c105760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0d8c2f2cae440d2dcc8caf60631b6044820152606401610342565b60038260ff1660048110610c2657610c2661151c565b60040201546001600160a01b031692915050565b60038160048110610c4a57600080fd5b6004020180546003909101546001600160a01b03909116915060ff1682565b60135467ffffffffffffffff848116620100009092041614610ccd5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642073657175656e6365206e756d6265720000000000000000006044820152606401610342565b6000610cda6006836115e0565b610ce59060016115f4565b6013549091507fc58abb24bb142a4e0cad0493a9c010849a79d42f31893b1433c3f8df560109799060039060ff1660048110610d2357610d2361151c565b6004020154604080516001600160a01b03909216825260ff841660208301520160405180910390a1601354600090819060039060ff1660048110610d6957610d6961151c565b6004020190508260ff166006148015610d885750600381015460ff1615155b15610eac5760005b600460ff82161015610eaa57816001018160ff1660048110610db457610db461151c565b602081049091015460ff601f9092166101000a900416600003610e98576001826001018260ff1660048110610deb57610deb61151c565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600383018054909116906000610e2583611613565b82546101009290920a60ff8181021990931691831602179091558354604080516001600160a01b039092168252918416602082015260019181018290529094507f066bc659ae17fa5d88a6c17e7f060bc3356ccd3124b3969c90f7e7a0006903a5915060600160405180910390a1610eaa565b80610ea2816115ab565b915050610d90565b505b816112cd5760005b600460ff821610156112cb576000826001018260ff1660048110610eda57610eda61151c565b602081049091015460ff601f9092166101000a900416118015610f285750816002018160ff1660048110610f1057610f1061151c565b602081049091015460ff601f9092166101000a900416155b156112b9576000603485846001018460ff1660048110610f4a57610f4a61151c565b602091828204019190069054906101000a900460ff16610f6a91906115f4565b610f749190611630565b90508060ff16600003610f85575060345b610f9160066034611652565b60ff168160ff16111561106c576001836002018360ff1660048110610fb857610fb861151c565b6020810491909101805460ff601f9093166101000a838102199091169315150292909217909155600384018054909116906000610ff4836115ab565b82546101009290920a60ff8181021990931691831602179091558454604080516001600160a01b0390921682528583166020830152918416918101919091527f066bc659ae17fa5d88a6c17e7f060bc3356ccd3124b3969c90f7e7a0006903a591506060015b60405180910390a160019350506112cb565b60005b60135460ff6101009091048116908216101561122b5760135460ff8281169116146112195760005b600460ff82161015611217578260ff1660038360ff16600481106110bd576110bd61151c565b600402016001018260ff16600481106110d8576110d861151c565b602081049091015460ff601f9092166101000a9004160361120557600060038360ff166004811061110b5761110b61151c565b600402016001018260ff16600481106111265761112661151c565b602091828204019190066101000a81548160ff021916908360ff16021790555060038260ff166004811061115c5761115c61151c565b60040201600301805460ff16906000611174836115ab565b82546101009290920a60ff81810219909316918316021790915586547f97ea15594c4f6957fbe31b383a1873bca7acc72675adb6fd1cc06a2aa4ffa91392506001600160a01b0316906003908516600481106111d2576111d261151c565b6004020154604080516001600160a01b03938416815292909116602083015260ff84169082015260600160405180910390a15b8061120f816115ab565b915050611097565b505b80611223816115ab565b91505061106f565b5080836001018360ff16600481106112455761124561151c565b6020808204909201805460ff948516601f9093166101000a92830292850219169190911790558454604080516001600160a01b03909216825285841692820192909252918316908201527f066bc659ae17fa5d88a6c17e7f060bc3356ccd3124b3969c90f7e7a0006903a59060600161105a565b806112c3816115ab565b915050610eb4565b505b600381015460ff16600319016113725780546040516001600160a01b0390911681527f970f935ee01502df35da11db45c29bdd97d8f41d5a0640c1dc3bd96c67f979879060200160405180910390a16002805460ff60a01b1916600160a11b1790558054604080516001600160a01b039092168252517f1728dd43546edd06fabfe796e5b641a151aa90998bfd1b1ec0ae98c6e77084599181900360200190a16113b5565b8260ff166006146113b55760135460ff6101008204811691611396911660016115f4565b6113a09190611630565b6013805460ff191660ff929092169190911790555b505050505050565b60405180608001604052806004906020820280368337509192915050565b6001600160a01b03811681146113f057600080fd5b50565b60006020828403121561140557600080fd5b8135611410816113db565b9392505050565b67ffffffffffffffff811681146113f057600080fd5b60008060006060848603121561144257600080fd5b833561144d81611417565b9250602084013561145d816113db565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b60208101600383106114a657634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156114be57600080fd5b813560ff8116811461141057600080fd5b60808101818360005b60048110156114fa57815160ff168352602092830192909101906001016114d8565b50505092915050565b60006020828403121561151557600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561154457600080fd5b8151611410816113db565b60006020828403121561156157600080fd5b81516001600160801b038116811461141057600080fd5b60006020828403121561158a57600080fd5b815161141081611417565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81036115c1576115c1611595565b60010192915050565b634e487b7160e01b600052601260045260246000fd5b6000826115ef576115ef6115ca565b500690565b60ff818116838216019081111561160d5761160d611595565b92915050565b600060ff82168061162657611626611595565b6000190192915050565b600060ff831680611643576116436115ca565b8060ff84160691505092915050565b60ff828116828216039081111561160d5761160d61159556fea26469706673582212208d596c4e04401d907e96d875bf0272db324727bed4e7fb46d4acadd5b391294664736f6c63430008110033a26469706673582212203868dfd49400baa89dcd3e92f16bc7a60633e735a5e4f39332fd14b5972e452b64736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c80637255d729116200006e5780637255d729146200016a5780638da5cb5b146200018d578063b3be8f36146200019f578063c62ce5d714620001b6578063f2fde38b14620001cd57600080fd5b80630a5694c214620000b0578063117a5b9014620000da578063129daf8414620001125780631b31abda1462000138578063715018a6146200015e575b600080fd5b620000c7620000c136600462000b62565b620001e4565b6040519081526020015b60405180910390f35b620000f1620000eb36600462000b8f565b62000216565b604080516001600160a01b03938416815292909116602083015201620000d1565b620001296200012336600462000ba9565b62000250565b604051620000d1919062000bce565b6200014f6200014936600462000b8f565b620002be565b604051620000d1919062000c5a565b6200016862000442565b005b620001746200045a565b6040516001600160a01b039091168152602001620000d1565b6000546001600160a01b031662000174565b62000168620001b036600462000cd6565b62000691565b62000168620001c736600462000ba9565b6200082b565b62000168620001de36600462000ba9565b6200098b565b600260205281600052604060002081815481106200020157600080fd5b90600052602060002001600091509150505481565b600181815481106200022757600080fd5b6000918252602090912060049091020180546001909101546001600160a01b0391821692501682565b6001600160a01b038116600090815260026020908152604091829020805483518184028101840190945280845260609392830182828015620002b257602002820191906000526020600020905b8154815260200190600101908083116200029d575b50505050509050919050565b604080516080810182526000808252602082015260609181018290528181019190915260015482106200032a5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590819d85b59481251608a1b60448201526064015b60405180910390fd5b6001828154811062000340576200034062000da9565b600091825260209182902060408051608081018252600490930290910180546001600160a01b039081168452600182015416838501526002810180548351818702810187018552818152949592949386019392830182828015620003ce57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620003af575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156200043257602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000413575b5050505050815250509050919050565b6200044c62000a0a565b62000458600062000a66565b565b60008033306040516200046d9062000ab6565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015620004a1573d6000803e3d6000fd5b50604080516080810182526001600160a01b03831681523360208201529192506001919081016000604051908082528060200260200182016040528015620004f3578160200160208202803683370190505b508152602001600060405190808252806020026020018201604052801562000525578160200160208202803683370190505b5090528154600181810184556000938452602093849020835160049093020180546001600160a01b039384166001600160a01b031991821617825585850151928201805493909416921691909117909155604082015180519293919262000593926002850192019062000ac4565b5060608201518051620005b191600384019160209091019062000ac4565b5050604051630402c38960e11b81523360048201526001600160a01b0383169150630805871290602401600060405180830381600087803b158015620005f657600080fd5b505af11580156200060b573d6000803e3d6000fd5b5050600180546000935062000621925062000dbf565b33600081815260026020908152604080832080546001810182559084529282902090920184905581516001600160a01b0387168152908101929092529192507fb60d84e37a6658effce28870b1d123cb86f86409df5888679310c0f276e1f5d2910160405180910390a150919050565b600154620006d95760405162461bcd60e51b8152602060048201526014602482015273139bc819d85b595cc818dc99585d1959081e595d60621b604482015260640162000321565b60018054600091620006eb9162000dbf565b90506001818154811062000703576200070362000da9565b60009182526020909120600490910201546001600160a01b031633146200077f5760405162461bcd60e51b815260206004820152602960248201527f4f6e6c79207468652067616d6520636f6e74726163742063616e207265636f726044820152686420726573756c747360b81b606482015260840162000321565b816001828154811062000796576200079662000da9565b90600052602060002090600402016003019080519060200190620007bc92919062000ac4565b507f3416b1d5f6001c304732992c6b449f4618d142683d0d7844e5d17c4fc49a691f60018281548110620007f457620007f462000da9565b60009182526020909120600490910201546040516200081f916001600160a01b031690859062000de7565b60405180910390a15050565b600154620008735760405162461bcd60e51b8152602060048201526014602482015273139bc819d85b595cc818dc99585d1959081e595d60621b604482015260640162000321565b60018054600091620008859162000dbf565b9050600181815481106200089d576200089d62000da9565b60009182526020909120600490910201546001600160a01b03163314620009195760405162461bcd60e51b815260206004820152602960248201527f4f6e6c79207468652067616d6520636f6e74726163742063616e207265636f726044820152686420706c617965727360b81b606482015260840162000321565b600181815481106200092f576200092f62000da9565b60009182526020808320600260049093020182018054600181810183559185528285200180546001600160a01b039097166001600160a01b03199097168717905594835290815260408220805494850181558252902090910155565b6200099562000a0a565b6001600160a01b038116620009fc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000321565b62000a078162000a66565b50565b6000546001600160a01b03163314620004585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000321565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6118518062000e4683390190565b82805482825590600052602060002090810192821562000b1c579160200282015b8281111562000b1c57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000ae5565b5062000b2a92915062000b2e565b5090565b5b8082111562000b2a576000815560010162000b2f565b80356001600160a01b038116811462000b5d57600080fd5b919050565b6000806040838503121562000b7657600080fd5b62000b818362000b45565b946020939093013593505050565b60006020828403121562000ba257600080fd5b5035919050565b60006020828403121562000bbc57600080fd5b62000bc78262000b45565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562000c085783518352928401929184019160010162000bea565b50909695505050505050565b600081518084526020808501945080840160005b8381101562000c4f5781516001600160a01b03168752958201959082019060010162000c28565b509495945050505050565b60208152600060018060a01b038084511660208401528060208501511660408401525060408301516080606084015262000c9860a084018262000c14565b90506060840151601f1984830301608085015262000cb7828262000c14565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121562000cea57600080fd5b823567ffffffffffffffff8082111562000d0357600080fd5b818501915085601f83011262000d1857600080fd5b81358181111562000d2d5762000d2d62000cc0565b8060051b604051601f19603f8301168101818110858211171562000d555762000d5562000cc0565b60405291825284820192508381018501918883111562000d7457600080fd5b938501935b8285101562000d9d5762000d8d8562000b45565b8452938501939285019262000d79565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b8181038181111562000de157634e487b7160e01b600052601160045260246000fd5b92915050565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b8181101562000e3757855185168352948301949183019160010162000e17565b50909897505050505050505056fe60806040523480156200001157600080fd5b506040516200185138038062001851833981016040819052620000349162000143565b600280546001600160a01b03199081166001600160a01b03841617909155600080547341c9e39574f40ad34c79f1c99b66a45efb830d4c921682179055604080516320bba64360e21b815290516382ee990c916004808201926020929091908290030181865afa158015620000ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d391906200017b565b600180546001600160a01b03199081166001600160a01b03938416179091556003805494909216931692909217909155506013805461ff0019166101001790556002805460ff60a01b19169055620001a0565b80516001600160a01b03811681146200013e57600080fd5b919050565b600080604083850312156200015757600080fd5b620001628362000126565b9150620001726020840162000126565b90509250929050565b6000602082840312156200018e57600080fd5b620001998262000126565b9392505050565b6116a180620001b06000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063837e7cc6116100ad578063d4f77b1c11610071578063d4f77b1c14610265578063d664006d1461026d578063dc4a3e951461028d578063e2ce0beb14610295578063f71d96cb146102a857600080fd5b8063837e7cc6146101e8578063955112cd146101f0578063b7d0628b14610223578063c19d93fb1461023e578063c45a01551461025257600080fd5b806347ce07cc116100f457806347ce07cc146101a25780634ff97b19146101b557806352a5f1f8146101c0578063552fcb1a146101d3578063564c49d5146101db57600080fd5b80630805871214610126578063085d48831461013b5780632e9c55391461016b578063302bcc571461017e575b600080fd5b6101396101343660046113f3565b6102dc565b005b60015461014e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101396101793660046113f3565b6103e1565b60135461019090610100900460ff1681565b60405160ff9091168152602001610162565b60005461014e906001600160a01b031681565b60135460ff16610190565b6101396101ce36600461142d565b6104ee565b610190600481565b6013546101909060ff1681565b6101396105bc565b60135461020a9062010000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610162565b600254600160a01b900460ff165b6040516101629190611484565b60025461023190600160a01b900460ff1681565b60025461014e906001600160a01b031681565b6101396107f4565b61028061027b3660046114ac565b610af1565b60405161016291906114cf565b610190603481565b61014e6102a33660046114ac565b610bb9565b6102bb6102b6366004611503565b610c3a565b604080516001600160a01b03909316835260ff909116602083015201610162565b6002546001600160a01b0316331461034b5760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792074686520666163746f72792063616e2063616c6c207468697320666044820152663ab731ba34b7b760c91b60648201526084015b60405180910390fd5b600380546001600160a01b0319166001600160a01b038084169182179092556013805461010061ff00199091161790556002805460ff60a01b19811690915560405163c62ce5d760e01b815260048101929092529091169063c62ce5d790602401600060405180830381600087803b1580156103c657600080fd5b505af11580156103da573d6000803e3d6000fd5b5050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104589190611532565b6001600160a01b0316336001600160a01b0316146104cc5760405162461bcd60e51b815260206004820152602b60248201527f4f6e6c7920666163746f7279206f776e65722063616e2073657420456e74726f60448201526a1c1e4818dbdb9d1c9858dd60aa1b6064820152608401610342565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316806105475760405162461bcd60e51b815260206004820152601760248201527f456e74726f70792061646472657373206e6f74207365740000000000000000006044820152606401610342565b336001600160a01b038216146105ab5760405162461bcd60e51b815260206004820152602360248201527f4f6e6c7920456e74726f70792063616e2063616c6c20746869732066756e637460448201526234b7b760e91b6064820152608401610342565b6105b6848484610c69565b50505050565b600160028054600160a01b900460ff16908111156105dc576105dc61146e565b146106295760405162461bcd60e51b815260206004820152601c60248201527f47616d65206973206e6f7420696e20706c6179696e67207374617465000000006044820152606401610342565b60135460039060ff16600481106106425761064261151c565b60040201546001600160a01b0316331461068e5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610342565b60008054600154604051631711922960e31b81526001600160a01b03918216600482015291169063b88c914890602401602060405180830381865afa1580156106db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ff919061154f565b6000805460015460408051426020808301919091523360601b6bffffffffffffffffffffffff19168284015282516034818403018152605483019384905280519101206319cb825f60e01b9092526001600160a01b03928316605882015260788101919091526001600160801b0394909416945091929116906319cb825f90849060980160206040518083038185885af11580156107a1573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107c69190611578565b6013805467ffffffffffffffff909216620100000269ffffffffffffffff0000199092169190911790555050565b600060028054600160a01b900460ff16908111156108145761081461146e565b146108615760405162461bcd60e51b815260206004820152601c60248201527f47616d65206973206e6f7420696e2077616974696e67207374617465000000006044820152606401610342565b601354600461010090910460ff16106108ab5760405162461bcd60e51b815260206004820152600c60248201526b11d85b59481a5cc8199d5b1b60a21b6044820152606401610342565b6013543390600390610100900460ff16600481106108cb576108cb61151c565b6004020180546001600160a01b0319166001600160a01b039290921691909117905560005b600460ff821610156109cc57601354600090600390610100900460ff166004811061091d5761091d61151c565b600402016001018260ff16600481106109385761093861151c565b602091828204019190066101000a81548160ff021916908360ff16021790555060006003601360019054906101000a900460ff1660ff166004811061097f5761097f61151c565b600402016002018260ff166004811061099a5761099a61151c565b602091828204019190066101000a81548160ff02191690831515021790555080806109c4906115ab565b9150506108f0565b50601354600490600390610100900460ff168281106109ed576109ed61151c565b60040201600301805460ff191660ff928316179055601380546101009004909116906001610a1a836115ab565b825460ff9182166101009390930a92830291909202199091161790555060025460405163c62ce5d760e01b81523360048201526001600160a01b039091169063c62ce5d790602401600060405180830381600087803b158015610a7c57600080fd5b505af1158015610a90573d6000803e3d6000fd5b5050601354610100900460ff166004039150610abc9050576002805460ff60a01b1916600160a01b1790555b6040513381527f31e760aa525306aba638a784082a013b6a1cc0a9a1789f3f22281c0453b10b1f9060200160405180910390a1565b610af96113bd565b60135460ff610100909104811690831610610b4d5760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0d8c2f2cae440d2dcc8caf60631b6044820152606401610342565b60038260ff1660048110610b6357610b6361151c565b604080516080810191829052926004928302016001019190826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610b80575094979650505050505050565b60135460009060ff610100909104811690831610610c105760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0d8c2f2cae440d2dcc8caf60631b6044820152606401610342565b60038260ff1660048110610c2657610c2661151c565b60040201546001600160a01b031692915050565b60038160048110610c4a57600080fd5b6004020180546003909101546001600160a01b03909116915060ff1682565b60135467ffffffffffffffff848116620100009092041614610ccd5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642073657175656e6365206e756d6265720000000000000000006044820152606401610342565b6000610cda6006836115e0565b610ce59060016115f4565b6013549091507fc58abb24bb142a4e0cad0493a9c010849a79d42f31893b1433c3f8df560109799060039060ff1660048110610d2357610d2361151c565b6004020154604080516001600160a01b03909216825260ff841660208301520160405180910390a1601354600090819060039060ff1660048110610d6957610d6961151c565b6004020190508260ff166006148015610d885750600381015460ff1615155b15610eac5760005b600460ff82161015610eaa57816001018160ff1660048110610db457610db461151c565b602081049091015460ff601f9092166101000a900416600003610e98576001826001018260ff1660048110610deb57610deb61151c565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600383018054909116906000610e2583611613565b82546101009290920a60ff8181021990931691831602179091558354604080516001600160a01b039092168252918416602082015260019181018290529094507f066bc659ae17fa5d88a6c17e7f060bc3356ccd3124b3969c90f7e7a0006903a5915060600160405180910390a1610eaa565b80610ea2816115ab565b915050610d90565b505b816112cd5760005b600460ff821610156112cb576000826001018260ff1660048110610eda57610eda61151c565b602081049091015460ff601f9092166101000a900416118015610f285750816002018160ff1660048110610f1057610f1061151c565b602081049091015460ff601f9092166101000a900416155b156112b9576000603485846001018460ff1660048110610f4a57610f4a61151c565b602091828204019190069054906101000a900460ff16610f6a91906115f4565b610f749190611630565b90508060ff16600003610f85575060345b610f9160066034611652565b60ff168160ff16111561106c576001836002018360ff1660048110610fb857610fb861151c565b6020810491909101805460ff601f9093166101000a838102199091169315150292909217909155600384018054909116906000610ff4836115ab565b82546101009290920a60ff8181021990931691831602179091558454604080516001600160a01b0390921682528583166020830152918416918101919091527f066bc659ae17fa5d88a6c17e7f060bc3356ccd3124b3969c90f7e7a0006903a591506060015b60405180910390a160019350506112cb565b60005b60135460ff6101009091048116908216101561122b5760135460ff8281169116146112195760005b600460ff82161015611217578260ff1660038360ff16600481106110bd576110bd61151c565b600402016001018260ff16600481106110d8576110d861151c565b602081049091015460ff601f9092166101000a9004160361120557600060038360ff166004811061110b5761110b61151c565b600402016001018260ff16600481106111265761112661151c565b602091828204019190066101000a81548160ff021916908360ff16021790555060038260ff166004811061115c5761115c61151c565b60040201600301805460ff16906000611174836115ab565b82546101009290920a60ff81810219909316918316021790915586547f97ea15594c4f6957fbe31b383a1873bca7acc72675adb6fd1cc06a2aa4ffa91392506001600160a01b0316906003908516600481106111d2576111d261151c565b6004020154604080516001600160a01b03938416815292909116602083015260ff84169082015260600160405180910390a15b8061120f816115ab565b915050611097565b505b80611223816115ab565b91505061106f565b5080836001018360ff16600481106112455761124561151c565b6020808204909201805460ff948516601f9093166101000a92830292850219169190911790558454604080516001600160a01b03909216825285841692820192909252918316908201527f066bc659ae17fa5d88a6c17e7f060bc3356ccd3124b3969c90f7e7a0006903a59060600161105a565b806112c3816115ab565b915050610eb4565b505b600381015460ff16600319016113725780546040516001600160a01b0390911681527f970f935ee01502df35da11db45c29bdd97d8f41d5a0640c1dc3bd96c67f979879060200160405180910390a16002805460ff60a01b1916600160a11b1790558054604080516001600160a01b039092168252517f1728dd43546edd06fabfe796e5b641a151aa90998bfd1b1ec0ae98c6e77084599181900360200190a16113b5565b8260ff166006146113b55760135460ff6101008204811691611396911660016115f4565b6113a09190611630565b6013805460ff191660ff929092169190911790555b505050505050565b60405180608001604052806004906020820280368337509192915050565b6001600160a01b03811681146113f057600080fd5b50565b60006020828403121561140557600080fd5b8135611410816113db565b9392505050565b67ffffffffffffffff811681146113f057600080fd5b60008060006060848603121561144257600080fd5b833561144d81611417565b9250602084013561145d816113db565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b60208101600383106114a657634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156114be57600080fd5b813560ff8116811461141057600080fd5b60808101818360005b60048110156114fa57815160ff168352602092830192909101906001016114d8565b50505092915050565b60006020828403121561151557600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561154457600080fd5b8151611410816113db565b60006020828403121561156157600080fd5b81516001600160801b038116811461141057600080fd5b60006020828403121561158a57600080fd5b815161141081611417565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81036115c1576115c1611595565b60010192915050565b634e487b7160e01b600052601260045260246000fd5b6000826115ef576115ef6115ca565b500690565b60ff818116838216019081111561160d5761160d611595565b92915050565b600060ff82168061162657611626611595565b6000190192915050565b600060ff831680611643576116436115ca565b8060ff84160691505092915050565b60ff828116828216039081111561160d5761160d61159556fea26469706673582212208d596c4e04401d907e96d875bf0272db324727bed4e7fb46d4acadd5b391294664736f6c63430008110033a26469706673582212203868dfd49400baa89dcd3e92f16bc7a60633e735a5e4f39332fd14b5972e452b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Ludo/Factory.sol:LudoFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 495,
        "contract": "contracts/Ludo/Factory.sol:LudoFactory",
        "label": "games",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(GameRecord)491_storage)dyn_storage"
      },
      {
        "astId": 500,
        "contract": "contracts/Ludo/Factory.sol:LudoFactory",
        "label": "playerGames",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GameRecord)491_storage)dyn_storage": {
        "base": "t_struct(GameRecord)491_storage",
        "encoding": "dynamic_array",
        "label": "struct LudoFactory.GameRecord[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_struct(GameRecord)491_storage": {
        "encoding": "inplace",
        "label": "struct LudoFactory.GameRecord",
        "members": [
          {
            "astId": 482,
            "contract": "contracts/Ludo/Factory.sol:LudoFactory",
            "label": "gameAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 484,
            "contract": "contracts/Ludo/Factory.sol:LudoFactory",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 487,
            "contract": "contracts/Ludo/Factory.sol:LudoFactory",
            "label": "players",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 490,
            "contract": "contracts/Ludo/Factory.sol:LudoFactory",
            "label": "podium",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}